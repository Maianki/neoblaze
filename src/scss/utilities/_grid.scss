@use "../helpers/mixins/breakpoints" as m;

/*Grid*/
@each $breakpoint, $screen-size in m.$breakpoints {
	@include m.mq($breakpoint) {
		@if $breakpoint != "" {
			$breakpoint: "-" + $breakpoint;
		}

		@for $rows from 1 through 6 {
			.grid#{$breakpoint}-rows-#{$rows} {
				grid-template-rows: repeat(#{$rows}, minmax(0, 1fr));
			}
		}

		.grid#{$breakpoint}-rows-none {
			grid-template-rows: none;
		}

		@for $cols from 1 through 12 {
			.grid#{$breakpoint}-cols-#{$cols} {
				grid-template-columns: repeat(#{$cols}, minmax(0, 1fr));
			}
		}
		.grid#{$breakpoint}-cols-none {
			grid-template-columns: none;
		}

		//Col span
		.col#{$breakpoint}-auto {
			grid-column: auto;
		}

		.col#{$breakpoint}-span-full {
			grid-column: 1/-1;
		}

		@for $col from 1 through 12 {
			.col#{$breakpoint}-span-#{$col} {
				grid-column: span + " " + #{$col} / span + " " + #{$col};
			}
		}

		//col start
		.col#{$breakpoint}-start-auto {
			grid-column-start: auto;
		}

		@for $col from 1 through 13 {
			.col#{$breakpoint}-start-#{$col} {
				grid-column-start: #{$col};
			}
		}

		//col end
		.col#{$breakpoint}-end-auto {
			grid-column-end: auto;
		}

		@for $col from 1 through 13 {
			.col#{$breakpoint}-end-#{$col} {
				grid-column-end: #{$col};
			}
		}

		//row span
		.row#{$breakpoint}-auto {
			grid-row: auto;
		}

		.row#{$breakpoint}-span-full {
			grid-row: 1/-1;
		}

		@for $row from 1 through 6 {
			.row#{$breakpoint}-span-#{$row} {
				grid-row: span + " " + #{$row} / span + " " + #{$row};
			}
		}

		//row start
		.row#{$breakpoint}-start-auto {
			grid-row-start: auto;
		}

		@for $col from 1 through 7 {
			.row#{$breakpoint}-start-#{$col} {
				grid-row-start: #{$col};
			}
		}

		//row -end
		.row#{$breakpoint}-end-auto {
			grid-row-end: auto;
		}

		@for $col from 1 through 7 {
			.row#{$breakpoint}-end-#{$col} {
				grid-row-end: #{$col};
			}
		}

		// Auto flow
		.grid#{$breakpoint}-flow-row {
			grid-auto-flow: row;
		}
		.grid#{$breakpoint}-flow-col {
			grid-auto-flow: column;
		}
		.grid#{$breakpoint}-flow-dense {
			grid-auto-flow: dense;
		}
		.grid#{$breakpoint}-flow-row-dense {
			grid-auto-flow: row dense;
		}
		.grid#{$breakpoint}-flow-col-dense {
			grid-auto-flow: column dense;
		}
	}
}

// Place Self

@each $breakpoint, $screen-size in m.$breakpoints {
	@include m.mq($breakpoint) {
		@if $breakpoint != "" {
			$breakpoint: "-" + $breakpoint;
		}

		//auto
		.place#{$breakpoint}-self-auto {
			place-self: auto;
		}

		.place#{$breakpoint}-self-stretch {
			place-self: stretch;
		}

		.place#{$breakpoint}-self-start {
			place-self: start;
		}

		.place#{$breakpoint}-self-center {
			place-self: center;
		}

		.place#{$breakpoint}-self-end {
			place-self: end;
		}

		.place#{$breakpoint}-self-baseline {
			place-self: baseline;
		}

		.place#{$breakpoint}-self-start-center {
			place-self: start center;
		}

		.place#{$breakpoint}-self-start-end {
			place-self: start end;
		}

		.place#{$breakpoint}-self-center-start {
			place-self: center start;
		}

		.place#{$breakpoint}-self-center-end {
			place-self: center end;
		}

		.place#{$breakpoint}-self-end-start {
			place-self: end start;
		}

		.place#{$breakpoint}-self-end-center {
			place-self: end center;
		}

		// auto flows
		.grid#{$breakpoint}-flow-row {
			grid-auto-flow: row;
		}
		.grid#{$breakpoint}-flow-col {
			grid-auto-flow: column;
		}
		.grid#{$breakpoint}-flow-dense {
			grid-auto-flow: dense;
		}
		.grid#{$breakpoint}-flow-row-dense {
			grid-auto-flow: row dense;
		}
		.grid#{$breakpoint}-flow-col-dense {
			grid-auto-flow: column dense;
		}

		// place items
		.place#{$breakpoint}-items-start {
			place-items: start;
		}
		.place#{$breakpoint}-items-end {
			place-items: end;
		}
		.place#{$breakpoint}-items-center {
			place-items: center;
		}
		.place#{$breakpoint}-items-baseline {
			place-items: baseline;
		}
		.place#{$breakpoint}-items-stretch {
			place-items: stretch;
		}

		//place content
		.place#{$breakpoint}-content-center {
			place-content: center;
		}
		.place#{$breakpoint}-content-start {
			place-content: start;
		}
		.place#{$breakpoint}-content-end {
			place-content: end;
		}
		.place#{$breakpoint}-content-between {
			place-content: space-between;
		}
		.place#{$breakpoint}-content-around {
			place-content: space-around;
		}
		.place#{$breakpoint}-content-evenly {
			place-content: space-evenly;
		}
		.place#{$breakpoint}-content-baseline {
			place-content: baseline;
		}
		.place#{$breakpoint}-content-stretch {
			place-content: stretch;
		}
	}
}
